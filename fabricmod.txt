# Единый Fabric‑мод (MC 1.20.1) на основе «Мета‑мода»: гиперподробный дизайн‑док

Документ основан строго на источниковой спецификации VAR_ENG_TXT (см. Приложение A), с явным отмечанием предположений там, где данные в VAR_ENG_TXT неполны или сокращены. Ссылки вида (§X.Y VAR_ENG_TXT) указывают на соответствующие разделы исходника.

Версии технологий (зафиксированы):
- Minecraft: 1.20.1
- Java: 17 (Temurin/HotSpot)
- Fabric Loader: 0.14.22
- Fabric API: 0.86.1+1.20.1
- Yarn mappings: 1.20.1+build.10
- Loom (Gradle): 1.3.10
- Gradle: 8.2

Предположение: единый идентификатор мода modid = "metamod" (мотивация: требуется унификация под одним id для маршрутизации сети, конфигов и ресурсов; исходник объединяет 8 модулей в «Мета‑мод», но не задает единый id).


1) Введение и цели

Цель: перенести функциональное покрытие «Мета‑мода» (McLib, Metamorph, Emoticons, Chameleon, Blockbuster, Commander, ExtendedReach, BetterLights) с Forge на Fabric 1.20.1, сведя их под единый модуль с общей инфраструктурой ядра (GUI/Config/Network/Utils), не теряя возможностей, описанных в VAR_ENG_TXT.

Принципы:
- Единый модуль с четкой внутренней модульностью по подсистемам (ядро, морфинг, эмоции, хамелеон, сцены, команды, расширенная дистанция, контент).
- Строгий маппинг Forge→Fabric: события, сеть, capability‑эквиваленты, ASM→Mixins.
- Консервативная семантика: поведение максимально сохраняется; различия платформы явно описаны.
- Сервер источник истины: syncable‑конфиги, валидация действий.
- Без внешних библиотек, кроме Fabric API.

Ссылки на источники:
- McLib как каркас и GUI‑фреймворк (§3.1 VAR_ENG_TXT)
- Metamorph: морфинг, капабилити IMorphing/IModelRenderer (§3.2)
- Emoticons: BOBJ, анимации, GUI, сеть (§3.3, §5)
- Chameleon: Bedrock‑геометрия, MoLang, Actions (§3.5)
- Blockbuster: редакторы, таймлайн/кейфреймы, частички (§3.4, §4.2, §4.3)
- Commander: /forin, /forinc, @{…}, «||» (§3.6, §7)
- ExtendedReach: ASM‑патчи, точки вмешательства (§3.7)
- BetterLights: блоки/айтемы/BE, рецепты (§3.8)


2) Архитектура и модули

2.1. Модульная карта

- core (аналог McLib):
  - gui: фреймворк, виджеты, keyframes, графы, модальные окна
  - network: диспетчер, сериализация, схемы пакетов
  - config: JSON5/JSON, syncable, пермишены (внутренние)
  - utils: математика/интерполяции/цвет/ресайзеры/ресурсы
  - mixin: инфраструктурные инжекты (минимум, т.к. McLib‑ASM детали частично не раскрыты)

- metamorph: морфинг, рендер подмены игрока, GUI creative/survival, команды, капабилити‑эквиваленты IMorphing, IModelRenderer

- emoticons: BOBJ‑пайплайн, AnimationManager, GUI выбора/просмотра, горячие клавиши, сеть эмотов

- chameleon: загрузка .geo/.animation.json c MoLang, ActionConfig/Playback, GUI редактор, интеграция с MorphManager

- blockbuster: редакторы моделей/записей/таймлайн/частиц, GUI «sequencer», сеть сцен/записей

- commander: Brigadier‑команды /forin (server), /forinc (client), препроцессор @{…} и «||»

- extendedreach: Mixins для дистанции взаимодействий (клиент/сервер), конфиг syncable

- betterlights: блоки/айтемы/BlockEntity, JSON‑рецепты, ItemGroup

2.2. Зависимости (ASCII)

-» жесткие, ↔ интеграция/мягкая

core (McLib аналог)
  ├─» metamorph
  │    ├↔ emoticons (MetamorphHandler, согласование эмоций) [§2 VAR_ENG_TXT]
  │    └↔ chameleon (ChameleonFactory в MorphManager) [§2]
  ├─» emoticons
  │    └↔ blockbuster (BBIntegration) [§2, §3.3]
  ├─» chameleon
  ├─» blockbuster
  ├─» commander
  ├─» extendedreach
  └─(нет) betterlights (самостоятельный контент, но теперь подключен через единый modid)


3) Жизненный цикл и инициализация

3.1. Entry points
- ModInitializer (мета‑инициализация сервера/общая):
  - регистрация конфигов (сервер источник для syncable)
  - регистрация сетевых каналов (ServerPlayNetworking)
  - регистрация команд (CommandRegistrationCallback)
  - регистрация блоков/айтемов/BE и рецептов BetterLights
  - инициализация Storage (капабилити‑эквиваленты) и интеграции (MorphManager factories)
  - установка пермишен‑модели и дефолтов

- ClientModInitializer:
  - регистрация клиентских пакетов (ClientPlayNetworking)
  - регистрация GUI экранов/панелей, KeyBinding
  - загрузка встроенных ресурсов Emoticons (BOBJ) и конфигов аниматора
  - регистрация resource reload listeners (Emoticons/Chameleon)
  - настройка рендеров (подмена/обертка PlayerEntityRenderer)
  - клиентская команда /forinc

3.2. Конфиги
- Загрузка ранняя: <config>/metamod/*.json(.json5)
- Syncable ключи: читаются на сервере; при логине клиент получает снапшот (см. §7 VAR_ENG_TXT; в McLib есть RequestConfigs/Config)
- Клиентские опции: локально применяются, не влияют на сервер (например, рендер стили GUI)

3.3. Регистрация ресурсов
- BetterLights: блоки/айтемы/BE types, JSON‑рецепты и лут‑таблицы
- Emoticons/Chameleon: динамические модели и анимации из <config> (см. §3.3, §3.5)

Предположение: для динамических ресурсов применяется Fabric API ResourceManagerHelper + собственные провайдеры пакетов, т.к. Forge‑like «ReflectionUtils.registerResourcePack(pack)» (§3.5) не доступно в Fabric в прежнем виде.

3.4. Разделение сторон (клиент/сервер)
- Без Forge‑proxy: разделение достигается:
  - отдельными entrypoints (ClientModInitializer)
  - клиентскими guarded‑вызовами через MinecraftClient.getInstance() проверки
  - Mixin с @Environment(EnvType.CLIENT), где применимо


4) Маппинг Forge→Fabric (детально)

4.1. События
- Forge @Mod/@SubscribeEvent → Fabric callbacks:
  - RegisterConfigEvent → собственная система конфигов + загрузка/регистрация при ModInitializer
  - Rendering/Keyboard handlers → Fabric Keyboard API (KeyBindingHelper), HudRenderCallback для overlay
  - Reload listeners → ResourceManagerHelper.registerReloadListener

Предположение: McLib.EVENT_BUS и его собственные события заменяются на локальные Listener‑шины внутри core, с простым подписочным паттерном (functional интерфейсы), т.к. публичных контрактов шины в VAR_ENG_TXT нет.

4.2. Сеть
- Forge FMLEventChannel/AbstractDispatcher → Fabric ServerPlayNetworking/ClientPlayNetworking:

Общая схема id: metamod:<subsystem>/<packet_name>

Примеры соответствий (по §7 VAR_ENG_TXT; конкретные пакеты выводим как проектные, т.к. точные имена в исходнике не перечислены целиком — см. пометки «Предположение»):

- core/mclib (Dispatcher: PacketAnswer/Boolean/Config/Confirm/DropItem/RequestConfigs/RequestPermission):
  - metamod:core/request_configs (client→server) [payload: пусто]; Предположение
  - metamod:core/config_values (server→client) [payload: NBT configs snapshot]; Предположение
  - metamod:core/request_permission (client→server) [payload: string perm]; Предположение
  - metamod:core/permission_result (server→client) [payload: string perm, bool]; Предположение
  - metamod:core/confirm, metamod:core/answer, metamod:core/boolean — по аналогии; Предположение

- metamorph (creative/survival/settings/blacklist sync) (§3.2):
  - metamod:metamorph/select (c→s) [payload: Morph NBT]
  - metamod:metamorph/apply (s→c) [payload: target UUID, Morph NBT]
  - metamod:metamorph/sync_settings (s→c) [payload: NBT settings]
  - metamod:metamorph/blacklist (s→c) [payload: list]
  - metamod:metamorph/request_list (c→s) [payload: scope]

- emoticons (PacketEmote/GameMode) (§3.3):
  - metamod:emote/play (c→s) [payload: emote id, flags]
  - metamod:emote/broadcast (s→c) [payload: actor UUID, emote id, duration]
  - metamod:emote/gamemode (both ways при необходимости) [payload: mode enum]

- chameleon (ActionsConfig sync не указан явно; строим консервативно):
  - metamod:chameleon/sync_actions (s→c) [payload: per‑morph action configs]; Предположение

- blockbuster (aperture/network packets: SceneLength/RequestLength/Profiles) (§3.4, §7):
  - metamod:bb/request_length (c→s) [payload: scene id]
  - metamod:bb/scene_length (s→c) [payload: scene id, length]
  - metamod:bb/profiles (s→c) [payload: profile listing]
  - Доп. пакеты для редактирования записей: Предположение (см. §8)

Протокол:
- Форматы payload: VarInt/VarLong, VarString (utf8 with max len), NBT (CompressedStreamTools), VarBool/byte flags
- Подтверждения: где требуется, отдельные метки *_ack (например, при изменении конфигов server→client ack); Предположение
- Защита: проверка прав/владения на server handler, валидация размеров/частоты

4.3. Capabilities
Forge Capabilities → Fabric:
- IMorphing, IModelRenderer, ICosmetic: внедряются в PlayerEntity через Mixin и интерфейсы:
  - интерфейсы: IMorphingComponent, IModelRendererComponent, ICosmeticComponent
  - хранилище: поля в MixinPlayerEntity, сериализация в readCustomDataFromNbt/writeCustomDataToNbt
  - доступ: чрез утилиту Components.get(player).morphing() и т.д.

Ссылки: §3.2 (Metamorph capabilities), §3.3 (Emoticons ICosmetic).

4.4. ASM/Coremod → Mixins

- ExtendedReach (детально в §11): вид замены констант 6.0/9.0/36.0 и методов reach → Mixins с @ModifyConstant/@Redirect/@Inject

- McLib core transformers (§3.1): CPacketCustomPayloadTransformer, SimpleReloadableResourceManagerTransformer, PacketBufferTransformer, EntityRendererTransformer.
  - Часть функционала (payload/resource manager) на Fabric реализуется «нативно» (Fabric networking, reload listeners).
  - EntityRendererTransformer (McLib) не детализирован в исходнике: не переносится без точной цели; 
    Предположение: не требуется, т.к. ExtendedReach покрывает EntityRenderer‑дистанцию через GameRenderer.updateTargetedEntity Mixins (см. §11).
  - Итого: перенести только явно определенные (ExtendedReach). Остальные — заменить Fabric API механизмами.

4.5. Конфиги
- Forge ValueBoolean/Int/Float… → JSON‑модель:
  - Типы: boolean, int, float, double, long, string, color (int ARGB), ResourceLocation (string), rotation_order (enum), buttons (UI composed)
  - Поля: key, default, current, syncable (bool), scope (client/server/both), constraints (min/max/step), comment
- GUI конфигов: собственные редакторы на базе core gui (trackpad, color picker, toggle, lists)

4.6. Команды
- Brigadier (Fabric API v2):
  - /forin <start:int> <end:int> <command:string...>
    - Выполнение вложенной команды на диапазоне [start..end] с шагом ±1, поддержка @{expr} замен и «||»
    - Доступ: permissionLevel >= 2 (см. §3.6)
  - /forinc (клиентская): аналог через ClientCommandRegistrationCallback (см. §9)
- Препроцессор:
  - Разделение « || » на сегменты
  - Замены @{expr} с безопасным математическим парсером (ограниченные функции)
  - Формат чисел: DecimalFormat "0.######" (§3.6)


5) Ядро (аналог McLib)

5.1. GUI‑фреймворк
Состав (см. §4.1 VAR_ENG_TXT):
- База:
  - GuiScreenBase (обертка над net.minecraft.client.gui.screen.Screen)
  - GuiElement, GuiScrollElement (scroll area)
  - GuiPanelBase (панели/вкладки)
  - GuiModelRenderer (3D виджет)
- Компоненты:
  - Buttons: GuiButtonElement, GuiToggleElement, GuiCirculateElement, GuiIconElement, GuiSlotElement
  - Inputs: GuiTextElement, GuiTrackpadElement (числа), GuiColorElement, GuiTexturePicker, GuiKeybindElement
  - Lists/Search: GuiListElement, GuiSearchListElement (Label/ResourceLocation/String)
  - Modals: GuiModal, GuiConfirmModal, GuiPromptModal, GuiMessageModal
  - Tooltips: GuiTooltip (Light/Dark)
  - Keyframes: GuiDopeSheet, GuiGraphView, GuiKeyframesEditor, GuiKeyframeInterpolationsList
- Layout:
  - Resizers: Flex/Grid/Row/Column, Anchors, Margins (см. utils.resizers.* в §4.1)
  - Viewport stack: для canvas/модалей
- Рендер:
  - DrawContext обертки, примитивы (оси, cube, точки), цвета, интерполяции
  - Конфигурируемые цвета/границы по настройкам (см. §4.1)

5.2. Сеть ядра
- Диспетчеры:
  - CoreNetwork: регистрация каналов/handlers для core и подсистем
  - Интерфейсы сериализации: INbtSerializable, IByteBufSerializable (локальные)
- Пакеты (см. §4.2):
  - config: request_configs, config_values
  - permissions: request_permission, permission_result
  - misc: confirm, answer, boolean (по необходимости)

5.3. Конфиги/пермишены
- ConfigManager: загрузка/сохранение JSON, синхронизация сервер→клиент для syncable
- PermissionFactory: локальная модель пермишенов по категориям (см. §3.1), привязка к уровням оператора
- GUI конфигов: панель со списком категорий/ключей, редакторы значений

5.4. Локализация
- Формат: assets/<modid>/lang/<locale>.json (en_us базовый), ключи из VAR_ENG_TXT (по модулям)
- IKey: обертка доступа к ключам, подстановка format args


6) Metamorph

6.1. Данные морфа
- Структура (из §3.2, с общими местами):
  - Morph NBT/JSON: идентификатор сущности/морфа, параметры рендера/анимации, снаряжение по слотам, поза/хитбокс
  - Списки: morphs.json, blacklist.json, remap.json, selectors.json, list.json (каталог <config>/metamorph)
  - Селекторы моделей и генерация дефолтов при отсутствии (см. §3.2 ClientProxy)
- Сравнение данных: stripEntityNBT/compareData (см. api.EntityUtils в §8)

6.2. Состояния/процессы
- Применение морфа игроку:
  - Смена формы (server authoritative), синхронизация всем клиентам
  - Способности/эффекты (из источника не детализированы — Предположение: базируемся на оригинальном Metamorph API)
- Preview:
  - GUI renderer (предпросмотр), настройки POV/Health/MorphAnimation off/on (см. §3.2 конфиги)
- Рейкаст/цели:
  - ray trace (EntityUtils.getTargetEntity), поза (getPose), hitbox перерасчет

6.3. GUI
- Creative:
  - Экран GuiCreativeMorphs/Screen: вкладки меню/список/редактор, поиск по спискам (см. §4.2)
  - Редакторы морфа: GuiAnimation, GuiMorphPanel/GuiSettingsPanel, GuiQuickEditor, GuiNestedEdit
  - Селекторы: GuiSelectorEditor/GuiSelectorsScreen
- Survival:
  - GuiSurvivalMorphs/Screen: упрощенный список/колесо
- Overlays: GuiHud, GuiOverlay (инфо о морфах)
- Хоткеи: переключение морфов/панелей (KeyboardHandler аналог)

6.4. Рендер
- Подмена Player renderer:
  - Mixin к PlayerEntityRenderer/skin map (Yarn: net.minecraft.client.render.entity.PlayerEntityRenderer)
  - Подмена на RenderSubPlayer аналог (см. §3.2 ClientProxy.postLoad про skinMap замену)
  - Совместимость со скинами (steve/slim) и cosmetic слоями (интеграция с Emoticons ICosmetic)

6.5. Сеть (см. §4.2)
- Пакеты выбора, применения, синхронизации списков/настроек/черного списка
- Валидация: права, наличие морфа, ограничения конфигов

6.6. Конфиги
- Из §3.2 перечисления (сокращены в исходнике «[…]»). Переносим явно упомянутые:
  - opEntitySelector (syncable, server‑side gate)
  - preventGhosts, killAcquire, acquireImmediately
  - keepMorphs
  - disablePov, disableHealth, disableMorphAnimation, ...
  - Прочие: см. VAR_ENG_TXT §3.2 (пометки «[…]» → недостающие — Предположение: сохраняем структуру и добавляем по мере выявления при переносе)

6.7. Интеграция
- Emoticons: согласование эмоций с морфами (MetamorphHandler §2, §3.3)
- Chameleon: фабрика в MorphManager (ChameleonFactory §2, §3.5)
- Blockbuster: GuiImmersiveMorphMenu (§3.4, §4.2)


7) Emoticons (BOBJ)

7.1. Формат BOBJ и пайплайн (§5, §3.3)
- Объекты:
  - BOBJData: armatures, meshes, actions (BOBJAction)
  - ragdoll.bobj, props.bobj/_simple, actions.bobj, модели default/slim/_3d/_simple/_simple_plus
- Слияния:
  - actionMap = actions ∪ ragdoll.actions
  - Мердж props и ragdoll в скелет, затем моделей с props
  - Копирование порядка костей ragdoll → steve
- Построение анимаций:
  - Animation/AnimationSimple, init(), регистрация в AnimationManager с приоритетом 1
  - Загрузка AnimatorConfig для default/slim/*_simple из ресурсов .json
- Пользовательские файлы:
  - <config>/emoticons/emotes/*.bobj и длительности *.json (callback) — добавляются при reload

7.2. Загрузка/Reload
- При клиентской инициализации:
  - Чтение встроенных ресурсов (assets/emoticons/models/entity/*.bobj, actions, props, ragdoll)
  - loadUserEmotes -> объединение actionMap и durations
  - Регистрация в AnimationManager
- ReloadListeners:
  - Fabric ResourceManagerHelper — перезагрузка эмотов при обновлении ресурсов или пользовательских файлов
  - Кэширование и сравнение timestamps (аналогично §3.5 Chameleon lastUpdate)

7.3. GUI и UX
- GuiEmotes:
  - Список эмоций, фильтры/поиск
  - Кнопки Play/Stop/Loop/Assign Keys (Fabric KeyBinding)
  - Предпросмотр: GuiEmoticonsModelRenderer (орбитальная камера, слои props/ragdoll, actions overlay)
- Overlay: отображение текущего эмота
- Горячие клавиши: EmoteKeys (загрузка/сохранение в <config>/keys.json)

7.4. Сеть (см. §4.2)
- PacketEmote/GameMode → metamod:emote/play, metamod:emote/gamemode
- Направления:
  - Клиент инициирует play → server валидирует и рассылает broadcast
  - Отключение звуков: конфиг disableSoundEvents

7.5. Конфиги
- general/buttons/animations/player_preview (§3.3)
  - disableAnimations (syncable)
  - modelType (default/simple/extruded/simple_plus) — client‑side
  - player preview (mode/scale/x/y)

7.6. Интеграции
- Metamorph/Blockbuster: BBIntegration, Morph‑эмоты (EmoticonsMorph, EmoticonsSection §3.3)
- AnimationManager унифицирован для Emoticons/Chameleon (см. §8.2)


8) Chameleon (Bedrock/MoLang)

8.1. Загрузка моделей/анимаций (§3.5)
- Каталог: <config>/chameleon/models
- Рекурсивно грузим *.geo.json и *.animation.json (включая ./animations/)
- Конструирование pack (динамический ресурс‑пак), регистрация в ресурсном дереве
- Индексация ключей моделей для GUI дерева

Предположение: регистрация динамического пакета — через Fabric API PackProvider/ResourceManagerHelper; в Forge использовался ReflectionUtils.registerResourcePack (§3.5).

8.2. Анимационная модель
- Data: Model (Bone, Cube, Transform, Vertex/UV), Animation (Channel, Part, Vector), Interpolation
- ActionConfig/ActionsConfig (NBT) — поведение и настройки действий
- ActionPlayback: Fade IN/OUT, speed, clamp/reset/tick/looping, приоритеты (см. §3.5)
- Animator: выбор действий по состоянию сущности (здоровье/вода/езда/полет/бег и т.д., §3.5)

8.3. MoLang
- MolangParser (инициализация с query.* переменными, §3.5)
- Пересчет выражений каждый тик
- Расширение переменных через Helper при необходимости

8.4. GUI редактор
- GuiChameleonMorph (MainPanel/Morph/CustomBodyPart/ActionsPanel)
- Renderer: подсветка костей (Highlight/Stencil)
- Состояния: idle/running/sprinting/crouching/shoot/consume/animation, приоритеты, speed, fade, tick

8.5. Интеграция
- MorphManager.INSTANCE.factories.add(new ChameleonFactory()) (§3.5)
- Модель анимаций унифицируется с AnimationManager (Emoticons) через адаптер (Предположение: общий интерфейс AnimationSource)


9) Blockbuster (сцены/редакторы/таймлайн/particles)

9.1. Модели
- Форматы: JSON/OBJ/VOX; ленивые загрузчики; рендерер GuiBBModelRenderer
- Редактор: GuiModelEditorPanel с вкладками (Limbs/List/Options/Poses), трансформации поз, канва текстур (§3.4, §4.2)

9.2. Записи/Сцены/Таймлайн
- GuiRecordingEditorPanel:
  - GuiRecordTimeline (дорожки/клипы, ruler, playhead, zoom, loop, operations)
  - GuiRecordList (список записей/треков)
  - Панели действий: Block/Break/BreakAnimation/Chat/Command/... (перечень в §3.4 сокращен — Предположение: реализовать каркас + подмножество, расширяемое)
- Манипуляции:
  - Insert/Delete clip, Split, Duplicate, Nudge, Snap to grid
  - Горячие клавиши: пробел Play/Pause, +/- zoom, стрелки шаг, Del удалить, Ctrl+C/V коп/вставить (см. §4.3 реконструкцию)

9.3. Частицы (snowstorm)
- Полнофункциональный редактор: секции Appearance/Collision/Lighting/Expiration/General/Initialization/Lifetime/Mode/Motion/ParticleMorph/Rate/Shape/Space (§3.4)
- Градиенты/кривые, предпросмотр шейдерами (шэйдеры упомянуты в ресурсах §6)

9.4. Сеть
- Запросы длительности/профилей (aperture/network §7): request_length/scene_length/profiles (см. §4.2)
- Синхронизация записей/редакторских действий: Предположение (проектируем пакетную схему, см. §14)


10) Commander (команды и препроцессор)

10.1. Команды (§3.6)
- /forin <start> <end> <command...>
  - permissionLevel=2
  - Диапазон [start..end], шаг ±1, три уровня вложенности (ограничение в исходнике отмечено «[…]» — Предположение: поддержать один уровень по умолчанию, с защитой от рекурсии)
- /forinc (client):
  - клиентский аналог через ClientCommandRegistrationCallback

10.2. Препроцессор
- Разделение строки по « || »
- Замены "@{expr}" → результат вычисления
- MathBuilder/DecimalFormat "0.######"
- Защита: 
  - ограничение функций/операторов, запрет побочных эффектов
  - лимиты на количество подкоманд и глубину вложенности
  - блокировка рекурсивного вызова (см. §3.6 onCommand защиты)

10.3. Интеграция
- Исполнение на стороне соответствующего обработчика:
  - Client: вызывает выполнение клиентской команды; Server: отправляет через командную систему сервера
- Локализации: строки помощи/ошибок (см. assets/commander/lang/en_US.lang §3.6)


11) ExtendedReach (Mixins на дистанцию)

Исходная логика (§3.7 VAR_ENG_TXT):
- Замена констант reach в местах Vanilla (6.0D/9.0D/36.0D/REACH_DISTANCE) на значение из конфига
- Классы Forge: PlayerControllerMP, PlayerInteractionManager, EntityRenderer.getMouseOver, NetHandlerPlayServer.processUseEntity, Item.rayTrace

Перенос на Yarn 1.20.1+build.10 (Fabric):

11.1. Конфиг
- general.reach: float (0..1024), default 5.0, syncable (server authoritative)

11.2. Точки инжекта (точные Yarn имена и сигнатуры)

Клиент:
- net.minecraft.client.network.ClientPlayerInteractionManager#getReachDistance()F
  - Цель: вернуть значение из конфига вместо vanilla
  - Инжект: @Inject(method = "getReachDistance", at = @At("HEAD"), cancellable = true)
  - Логика: если игрок/мир валидны, setReturnValue(ServerSyncedReach) иначе дефолт
  - Безопасность: только клиентская визуализация; не влияет на серверные проверки

- net.minecraft.client.render.GameRenderer#updateTargetedEntity(F)V
  - Цель: заменить использующиеся в методе константы дистанции (обычно 6.0D) для raycast
  - Инжект: @ModifyConstant(method = "updateTargetedEntity", constant = @Constant(doubleValue = 6.0D))
  - Возврат: reachConfig (double) 
  - Дополнительно: возможны иные константы/ветки для жидкости/extended reach — 
    Предположение: добавить вторые @ModifyConstant для 9.0D при наличии

Сервер:
- net.minecraft.server.network.ServerPlayNetworkHandler#onPlayerInteractEntity(Lnet/minecraft/network/packet/c2s/play/PlayerInteractEntityC2SPacket;)V
  - Vanilla: проверки на squaredDistance <= 36.0D и/или 9.0D (ближний/дальний reach)
  - Инжекты:
    - @ModifyConstant(constant = @Constant(doubleValue = 36.0D)) → return reach^2
    - @ModifyConstant(constant = @Constant(doubleValue = 9.0D)) → return reach^2 (ближний)
  - Безопасность: проверять null entity, спектатор режим

- net.minecraft.server.network.ServerPlayNetworkHandler#onPlayerInteractBlock(Lnet/minecraft/network/packet/c2s/play/PlayerInteractBlockC2SPacket;)V
  - Проверки дистанции при взаимодействии с блоками
  - Инжект: @Redirect на вызов squaredDistanceTo/дистанционного сравнения → использовать reach^2
  - Предположение: в 1.20.1 расстояние до блока проверяется через ServerPlayerInteractionManager; см. ниже

- net.minecraft.server.network.ServerPlayerInteractionManager#tryBreakBlock(Lnet/minecraft/util/math/BlockPos;)Z
  - Проверка расстояния ломания
  - Инжект: @Redirect либо @ModifyConstant (36.0D) → reach^2
  - Альтернативно: #updateBlockBreakingProgress/#processBlockBreakingAction
  - Предположение: конкретные места зависят от точной реализации; тестировать при интеграции

Общие вспомогательные:
- Класс dev.<mod>.extendedreach.BlockReach:
  - static double getReach(ServerPlayerEntity or settings)
  - static double getReachSq()
  - static boolean isExtended() (если требуется для UI/визуализации)

11.3. Стратегия и безопасность
- Сервер — единый источник: клиент получает sync значения и использует для визуала; фактические проверки — только на сервере
- Rate‑limit: изменение reach требует broadcast клиентам
- Конфликт с другими модами: при наличии иного миксина — приоритет @Priority(1000), тест на совместимость
- Тестовые кейсы:
  - Взаимодействие с блоком/предметом на дистанции >6
  - Атака/интеракция сущности на дистанции >3 (по умолчанию)
  - Ломание блоков на границе reach
  - Согласованность визуального хайлайта и фактической досягаемости


12) BetterLights (контент)

12.1. Блоки (§3.8)
- GlowingBricks:
  - Материал: ROCK (аналог — Block.Settings.of(Material.STONE))
  - Твердость: 1.0F
  - Светимость: 1.0F (luminance 15)
  - Вкладка креатива
- Light (стеклянный «столбик света»):
  - Прозрачность: non‑opaque, TRANSLUCENT
  - AABB: столбик (узкий)
  - BlockEntity provider: Light BE
  - Коллизии: ограниченные/отсутствуют (см. §3.8)
- LightProvider (невидимый свет):
  - Материал AIR, не видим, без коллизии/дропа, replaceable, light 1.0F

12.2. BlockEntity
- TileEntityLight → BlockEntityType<LampLightEntity>
  - Сериализация NBT, тики при необходимости (если поведение меняется)

12.3. Предметы/Рецепты
- Itemlampbot/lamptop
- Рецепты JSON (shaped): glowstone + stone_bricks и пр. (§3.8)
- ItemGroup: "tabLight" → Creative Tab (Fabric: ItemGroupEvents/Registry)

12.4. Рендер
- Модель json, blockstates (variant), item models
- Регистрация client‑side render layers (translucent)

12.5. Локализации
- assets/<modid>/lang/en_us.json (переиспользовать ключи из §6 «BetterLights: assets/slp/lang/en_US.lang» — преобразовать в JSON)


13) Конфиги/Локализации/Ресурсы

13.1. Каталоги конфигов
- <config>/metamod/
  - core.json
  - metamorph/*.json
  - emoticons/keys.json, emotes/*.json, *.bobj
  - chameleon/models/**/*.json
  - extendedreach.json
  - commander.json
  - blockbuster/*.json (сцены/записи, при наличии)
- Формат: JSON (разрешить комментарии JSON5 — Предположение: парсер Gson с lenient и strip комментариев)

13.2. Локализации
- Базовый en_us, расширяем ru_ru/… (см. §6 карты соответствий)
- Ключи из VAR_ENG_TXT по модулям: mclib.*, emoticons.*, metamorph.*, commander.*, extendedreach.*, chameleon.*, betterlights.*

13.3. Ресурсы
- Динамика:
  - Emoticons: загрузка *.bobj из config
  - Chameleon: загрузка bedrock json из config
- Регистрация ресурс‑пакетов:
  - Предположение: собственный PackProvider + ALWAYS_ENABLED built‑in pack


14) Сеть и синхронизация

14.1. Общие правила
- Все пакеты в пространстве metamod:<subsystem>/<name>
- Payload:
  - NBT (Compressed) для сложных структур (морфы, конфиги)
  - Примитивы: VarInt/VarLong/VarBool/String
- Валидация:
  - Пермишены (уровень оператора для опасных команд/конфигов)
  - Размеры NBT (лимиты), rate limit по времени
  - UUID и владение объекта (актер, сцена)

14.2. Перечень пакетов (инвентарь по подсистемам)

core/mclib (по §7):
- request_configs c→s
- config_values s→c
- request_permission c→s
- permission_result s→c
- confirm, answer, boolean — при необходимости подтверждений
Предположение: имена и часть payload детализированы проектно.

metamorph (§3.2):
- select c→s: Morph NBT
- apply s→c: UUID, Morph NBT
- sync_settings s→c: NBT
- blacklist s→c: List<NbtString>
- request_list c→s: scope enum

emoticons (§3.3):
- emote/play c→s: emote id, loop flag
- emote/broadcast s→c: actor UUID, emote id, duration
- emote/gamemode s↔c: mode enum

chameleon (§3.5):
- chameleon/sync_actions s→c: per‑morph actions config (Предположение)
- chameleon/request_models c→s; chameleon/models s→c (Предположение для GUI списков)

blockbuster (§3.4, §7):
- bb/request_length c→s: scene id
- bb/scene_length s→c: scene id, length
- bb/profiles s→c: listing
- bb/record_update c↔s: изменения клипов/ключей (Предположение)
- bb/scene_control c→s: play/pause/loop (Предположение)

commander (§3.6):
- не требуется, т.к. Brigadier обрабатывает на месте; опционально client→server для препроцессора — Предположение: не использовать сеть

extendedreach (§3.7):
- reach_sync s→c: float reach (server authoritative)

14.3. Ack/Retry
- При критичных изменениях (конфиги) — server→client ack
- Отказ/ошибка — error codes, локализация сообщений


15) Производительность и безопасность

15.1. Тики/Кэш
- Анимации: кэш каналов/кривых, object pools
- IO: загрузка файлов вне тика (reload listeners), отложенные задачи через executor
- GUI: виртуализация списков, ограничение перерисовок

15.2. Санитизация
- Пользовательские .bobj/.json: лимиты размеров, валидация схемы, try/catch парсинга, логирование
- MoLang: ограниченный набор функций/переменных

15.3. Пермишены/Команды
- /forin доступ только операторам
- Препроцессор: лимит длины, количества сегментов «||», глубины @{}

15.4. Сеть
- Размер payload: лимиты (например, 128KB на пакет), разбиение больших наборов
- Rate limit пер‑UUID/канал


16) Сборка и метаданные

16.1. Пакетная структура (предложение)
- dev.metamod.core (gui, config, network, utils)
- dev.metamod.metmorph (api, client.gui, network, storage)
- dev.metamod.emoticons (bobj, api, client.gui, network)
- dev.metamod.chameleon (bedrock, molang, client.gui, network)
- dev.metamod.blockbuster (model, timeline, recording, particles, client.gui, network)
- dev.metamod.commander (command, preprocessor)
- dev.metamod.extendedreach (mixin, config)
- dev.metamod.betterlights (block, item, blockentity, recipes)

Предположение: базовый пакет dev.metamod.* для единообразия.

16.2. fabric.mod.json, Gradle, Loom — см. Приложение B (файлы)

16.3. Версионирование
- SemVer: 0.y.0 до стабилизации API, затем 1.x
- Канал релизов: alpha → beta → release
- Совместимость сохранений: при изменениях схемы NBT — миграторы


17) Критерии приемки

- Полнота:
  - Покрывает все подсистемы с разделами: данные, API, GUI, сеть, конфиг, локализация, сценарии, ограничения
  - Есть список Mixins с Yarn‑именами и типами инжектов (см. §11)
  - Полные перечни конфиг‑ключей (на базе явных ключей из VAR_ENG_TXT; для сокращенных — помечены как «Предположение»)
  - Полные перечни команд/аргументов/примеров (/forin, /forinc)
  - Полные перечни сетевых пакетов и форматов (см. §14)
  - Список GUI экранов/панелей и элементов с событиями
  - Схемы данных (NBT/JSON) и сериализация
  - Минимальные build‑шаблоны
- Проверка:
  - Кросс‑линк с §3.x VAR_ENG_TXT для каждой фичи
  - ExtendedReach: миксины для клиент/сервер расстояний перечислены с Yarn‑именами
- Без внешних библиотек (кроме Fabric API); исключения отсутствуют


18) Приложения

Приложение A. VAR_ENG_TXT (источниковая спецификация)

```text
Мета‑мод: Полный статический аудит и консолидация BetterLights, Blockbuster, Chameleon, Commander, Emoticons, ExtendedReach, McLib, Metamorph
Версия артефактов: согласно деревьям/дампам в репозитории ploot887/Mod (см. перечень источников ниже)
Аудитор: ИИ‑ассистент
Дата: 2025‑08‑08

СОДЕРЖАНИЕ
1. Резюме архитектуры
2. Диаграмма модулей и зависимостей (текстовая)
3. Подробный функциональный обзор по подсистемам
   3.1. Базовая библиотека и GUI‑фреймворк (McLib)
   3.2. Морфинг и геймплей (Metamorph)
   3.3. Анимации/модели и эмоции (Emoticons)
   3.4. Кинематограф/записи/редакторы (Blockbuster)
   3.5. Процедурная анимация и MoLang (Chameleon)
   3.6. Расширенные команды (Commander)
   3.7. Удлинённая дистанция взаимодействия (ExtendedReach, ASM)
   3.8. Освещение/контент (BetterLights)
4. Полный GUI‑спецификатор
   4.1. Система GUI (McLib): принципы, лейаут, отрисовка
   4.2. Каталог экранов/панелей по модулям (состав, элементы, события)
   4.3. Глава: «GUI sequencer morph» (реконструкция)
5. Пайплайн .bobj (BOBJ): от загрузки до использования
6. Карты соответствий: классы ↔ ресурсы ↔ локализации ↔ GUI элементы
7. Справочник команд, сетевых каналов и конфигов
8. Приложение: таблицы классов/методов, точки входа, события, capability/регистрации
9. Источники и покрытие

Важное примечание по полноте: Документ покрывает все представленные пользователем артефакты (деревья и дамп[...]

1) РЕЗЮМЕ АРХИТЕКТУРЫ

Мета‑мод представляет собой связку из 8 модулей:
- McLib (mchorse.mclib): базовая библиотека, GUI‑фреймворк, конфиги, ключевые утилиты, события, сеть, пермишены, keyframe‑вид[...]
- Metamorph (mchorse.metamorph): система «морфинга» игрока в сущности с поддержкой способностей, редакторов морфов и оверл�[...]
- Emoticons (mchorse.emoticons): воспроизведение анимаций/эмоций для моделей игрока; активно использует формат BOBJ (.bobj), skin_n_[...]
- Chameleon (mchorse.chameleon): проигрыватель процедурных действий с MoLang, загрузчик Бедрок‑подобных .geo/.animation.json, а также и[...]
- Blockbuster (mchorse.blockbuster): большой мод для сцен/актеров/записей/таймлайна, модельных редакторов, поддержка OBJ/VOX и бо[...]
- Commander (mchorse.commander): расширяет консольные команды (/forin, /forinc) с подстановками @{…} и «pipe» оператором «||», включая �[...]
- ExtendedReach (mchorse.extendedreach): coremod с ASM‑патчами для расширения дистанции взаимодействия, синхронизируемый конфиг (rea[...]
- BetterLights (com.susjin.lampmod): добавляет блоки/тайлэнтити/предметы освещения, рецепты и клиентский creative tab.

Объединяющим каркасом служит McLib: общие события, GUI, конфиг‑модель, сеть, ASM‑утилиты. Metamorph/Emoticons/Chameleon/Blockbuster с�[...]

2) ДИАГРАММА МОДУЛЕЙ И ЗАВИСИМОСТЕЙ (текстовая)

Hard deps (по @Mod/dependencies и коду):
- Emoticons → required-after:mclib, after:metamorph (Emoticons.java)
- Chameleon → required-after:mclib, required-after:metamorph (Chameleon.java)
- ExtendedReach → required-after:mclib (ExtendedReach.java)
- Metamorph → зависит от McLib (использует McLib.EVENT_BUS, ConfigBuilder и др.)
- Blockbuster → зависит от McLib и имеет собственные интеграции с Aperture; использует GUI McLib и API моделей; (по дереву: множе�[...]
- Commander → required-after:mclib (Commander.java)
- BetterLights → самостоятельный контент‑мод (Forge 1.10.2), без McLib

Мягкие/интеграционные deps:
- Emoticons ↔ Metamorph: MetamorphHandler (api/metamorph), согласование эмоций с морфами; GuiImmersiveMorphMenu в Blockbuster.
- Emoticons ↔ Blockbuster: BBIntegration (blockbuster/BBIntegration.java)
- Chameleon ↔ Metamorph: ChameleonFactory добавляется в MorphManager.INSTANCE.factories.

Каналы/сеть:
- Emoticons.channel ("Emoticons") FMLEventChannel
- Metamorph.channel ("Metamorph") FMLEventChannel
- McLib.network.mclib.Dispatcher (регистрирует пакеты McLib)
- Blockbuster apertue/network (клиент/сервер handlers) — свой стек, показан в дереве
- ExtendedReach не использует каналы, но ASM‑патчит Vanilla

ASM/Coremod:
- ExtendedReachCMClassTransformer: трансформирует PlayerControllerMP, PlayerInteractionManager, EntityRenderer, NetHandlerPlayServer, Item (см. §3.7).
- McLib core: core/transformers (CPacketCustomPayloadTransformer, SimpleReloadableResourceManagerTransformer и др.) — инфраструктурные патчи (payload, ресурсы).

Capabilities:
- Metamorph: IMorphing, IModelRenderer
- Emoticons: ICosmetic

Сущности:
- Metamorph: EntityMorph (регистрация с ResourceLocation "metamorph:morph").

3) ПОДРОБНЫЙ ФУНКЦИОНАЛЬНЫЙ ОБЗОР ПО ПОДСИСТЕМАМ

3.1) McLib (mchorse.mclib)
Назначение:
- Общая библиотека/каркас: конфиги, пермишены, сеть, события, утилиты, GUI‑фреймворк, keyframe‑виджеты, ресурсы (ик�[...]

Главные классы/жизненный цикл:
- McLib.java (@Mod EventBusSubscriber)
  - MOD_ID "mclib", VERSION "%VERSION%", updateJSON (ветка 1.12)
  - proxy: ClientProxy/CommonProxy
  - EVENT_BUS (собственный шина событий модов McHorse)
  - @SubscribeEvent onConfigRegister(RegisterConfigEvent): регистрирует множество конфигов (appearance, tutorials, background, scrollbars, multiskin, vanilla/maxPacketSize[...]
  - @SubscribeEvent onPermissionRegister(RegisterPermissionsEvent): PermissionFactory, категории
  - @EventHandler preInit/init/serverInit: регистрация, команды CommandMcLib/CommandCheats
  - NetworkCheckHandler: всегда true
- CommonProxy: держит ConfigManager, регистрирует Dispatcher (mclib.network.mclib), EventBus: ConfigHandler/EventHandler, Icons.register()
- ClientProxy: регистрирует KeyboardHandler, InputRenderer, RenderingHandler; KeybindConfig; включение stencil в FBO; reload listener (обновление LangKey, очистк�[...]

GUI‑фреймворк (пакеты mclib.client.gui.*):
- framework: GuiBase, GuiElement(s), IGuiElement/IFocusedGuiElement, GuiScrollElement, GuiModelRenderer, GuiPanelBase и др.
- buttons: GuiButtonElement, GuiToggleElement, GuiCirculateElement, GuiIconElement, GuiSlotElement
- input: GuiBaseTextElement, GuiTextElement, GuiTrackpadElement, GuiColorElement, GuiTexturePicker, GuiKeybindElement, GuiTransformations; под‑пакеты color (GuiColorPalette/Picker), multisk[...]
- list: разнообразные списки/поиски элементов (GuiListElement, GuiSearchListElement, Label/ResourceLocation/String варианты)
- modals: GuiModal/Confirm/List/Message/PopUp/Prompt
- utils: GuiCanvas/Editor, GuiContext, GuiDraw, GuiDrawable, GuiLabel, GuiInventoryElement, ViewportStack, IconContainer, ITextColoring; IViewport/IViewportStack
- tooltips: GuiTooltip, ITooltip, LabelTooltip, InterpolationTooltip; styles: Dark/Light/TooltipStyle
- keyframes: GuiDopeSheet, GuiGraphView, GuiKeyframeElement, GuiKeyframeInterpolationsList, GuiKeyframesEditor, GuiSheet; IAxisConverter, Selection

Рендер/утилиты:
- client.Draw (оси/точки/куб), RenderLightmap, VertexBuilder
- utils: богатейший набор: Color/ColorUtils, Interpolation, Interpolations, InterpolationRenderer, MathUtils/MatrixUtils, JsonUtils, ReflectionUtils, RLUtils, RenderingUtils, RayTracing[...]

Сеть:
- network: абстракции AbstractDispatcher, AbstractMessageHandler, ClientMessageHandler, ServerMessageHandler, IByteBufSerializable, INBTSerializable
- network.mclib: Dispatcher и набор Packet* (Answer, Boolean, Config, Confirm, DropItem, RequestConfigs/Permission), клиентские/серверные handlers

Конфиги/пермишены:
- config: Config, ConfigBuilder/Handler/Manager/Thread, values (ValueBoolean/Int/Float/Double/Long/Color/RL/String/RotationOrder, GUI интеграция)
- permissions: PermissionFactory, PermissionCategory, PermissionUtils; событие RegisterPermissionsEvent

Coremod/ASM:
- core: McLibCM, McLibCMInfo, McLibCMClassTransformer; transformers: CPacketCustomPayloadTransformer, EntityRendererTransformer, PacketBufferTransformer, SimpleReloadableResourceManagerTransformer (д[...]

Ключевое: McLib — это фундаментальная библиотека и GUI‑фреймворк, от которой напрямую зависят Metamorph/Emoticons/Chameleon/Ex[...]

3.2) Metamorph (mchorse.metamorph)
Назначение:
- Механика морфинга (смена формы игрока на сущности), способности, редакторы, GUI в креативе/выживании, замена р�[...]

Главные классы/жизненный цикл:
- Metamorph.java (@Mod)
  - Канал FMLEventChannel "Metamorph"
  - Конфиги (RegisterConfigEvent): множество ValueBoolean/Int: opEntitySelector (syncable), preventGhosts/killAcquire/acquireImmediately, keepMorphs, disablePov/Health/MorphAnimation/M[...]
  - preLoad: McLib.EVENT_BUS.register(this), proxy.preLoad
  - load/postLoad/serverStarting: регистрация команд (CommandMorph/AcquireMorph/Metamorph), подгрузка активных списков/настроек, сетевой кан�[...]
- CommonProxy:
  - Регистрация Dispatcher (network), подключение фабрики MetamorphFactory в MorphManager.INSTANCE.factories
  - Файлы конфигурации в <config>/metamorph: morphs.json, blacklist.json, remap.json, selectors.json, list.json
  - Регистрация EntityMorph в EntityRegistry: id 0, "metamorph:morph"
  - Регистрация событий: MorphHandler, SoundHandler, CapabilityHandler, RegisterHandler
  - Регистрация капабилити: IMorphing (MorphingStorage, Morphing), IModelRenderer (ModelRendererStorage, ModelRenderer)
  - Генерация дефолтных файлов при отсутствии
- ClientProxy (SideOnly CLIENT):
  - RenderingRegistry.registerEntityRenderingHandler(EntityMorph, RenderMorph.MorphFactory)
  - Регистрация event handlers: RenderingHandler (HUD overlay GuiOverlay/GuiHud), KeyboardHandler, EntityModelHandler
  - Загрузка селекторов моделей (models.loadSelectors) и генерация JSON при отсутствии
  - postLoad: замена RenderPlayer на RenderSubPlayer через рефлексию RenderManager.skinMap (skin map)
  - canEditSelectors: OP или opEntitySelector

GUI/клиент:
- client.gui: GuiMorphs (основной экран), creative.* (GuiCreativeMorphs, GuiCreativeMorphsList/Menu/Screen, GuiMorphRenderer, GuiMorphSection, GuiNestedEdit, GuiQuickEditor, GuiSelectorEd[...]
- client.render.RenderMorph: рендер морфов
- client.KeyboardHandler/NetworkHandler/RenderingHandler
- capabilities.render: EntitySelector/Adapter/IModelRenderer/ModelProvider/Renderer/Storage
- api: Morph/MorphUtils/MorphManager/MorphHandler/RegisterHandler/MorphSettings/IMorphFactory/MorphAPI и т.д.; morphs: AbstractMorph/EntityMorph/utils (Animation, Hitbox, IAnimationProvider, IMorph[...]

Сеть:
- network.Dispatcher, client handlers и множество Packet* (creative, survival, settings, blacklist) — синхронизация состояния морфинга, индексов, из[...]

Функционал:
- Морфинг игрока, обработка поз (EntityUtils.getPose), сравнение NBT (stripEntityNBT/compareData), ray trace/target entity, слоты экипировки, пере�[...]

3.3) Emoticons (mchorse.emoticons)
Назначение:
- Загрузка/воспроизведение анимаций эмоций (эмотов) для моделей игрока. Формат BOBJ (.bobj) — основной для анимаци�[...]

Главные классы/жизненный цикл:
- Emoticons.java (@Mod)
  - Канал "Emoticons" (FMLEventChannel)
  - Конфиги: ValueButtons (клиентские кнопки), disableSoundEvents, animations: disableAnimations (syncable), modelType (режимы: default/simple/extruded/simple_plus, client[...]
  - preInit: channel, McLib.EVENT_BUS.register(this), proxy.preInit
  - init: proxy.init
  - serverStart: CommonProxy.registerEmotes() — загрузка серверных эмоций из <config>/emoticons/emotes/*.json
- CommonProxy:
  - configFolder = <config>/emoticons
  - Dispatcher.register()
  - Интеграции: BBIntegration/MorphemorphHandler.register() — при наличии
  - init: Emotes.register(); Capability ICosmetic (CosmeticStorage/Cosmetic), событие CapabilitiesHandler
  - registerEmotes(file, callback): парсинг JSON пользовательских эмоций, регистрации в Emotes по длительности из callback
- ClientProxy (SideOnly CLIENT):
  - EmoteKeys (горячие клавиши) загрузка/сохранение из <config>/keys.json
  - Регистрация клиентских событий: KeyboardHandler, EntityModelHandler; клиентская команда /emote
  - Загрузка встроенных моделей/анимаций:
    - BOBJLoader.readData для actions.bobj (действия), ragdoll.bobj и множества модельных .bobj (default/slim/_3d/_simple/_simple_plus, props/_simple)
    - reloadActions(): объединяет actionMap из actions + ragdoll, подключает пользовательские действия (.bobj из <config>/emotes и .json для дли�[...]
    - Присвоение actionMap ко всем вариантам моделей, merge проп‑моделей и ragdoll в скелет, выравнивание порядка костей
    - Инициализация Animation объектов (Animation/AnimationSimple), регистрация в AnimationManager с приоритетом 1 и configFolder
    - Загрузка AnimatorConfig для default/slim/default_simple/slim_simple из ресурсов .json
  - Сетевая регистрация NetworkHandler в Emoticons.channel

Скин‑н‑бонз (skin_n_bones) API:
- api/animation/model: AnimationSimple/AnimationSimpleMesh/AnimatorEmoticonsController
- skin_n_bones/api: Animation/AnimationManager (+gson/configs), модель анимаций, JSON адаптеры и контроллеры
- api/metamorph: EmoticonsFactory, EmoticonsMorph, EmoticonsSection, MetamorphHandler (интеграция), MorphEmote/MorphPart; GUI редактор морфа эмоций

Сеть:
- network.Dispatcher с PacketEmote/GameMode; client/server handlers (ClientHandlerEmote/GameMode, ServerHandlerEmote)

GUI:
- client/gui: GuiEmotes (основной выбор эмоций), GuiEmotesList, GuiEmoticonsModelRenderer (просмотр); горячие клавиши — EmoteKeys; overlay части отс�[...]
- blockbuster/BBIntegration: интеграция GUI с Blockbuster (эмоты как действия)
- utils.ValueButtons — клиентская панель кнопок в конфиге

Ресурсы:
- assets/emoticons/models/entity/*.bobj, default*.json/slim*.json конфиги, actions.bobj/props.bobj/ragdoll.bobj, звуки *.ogg + sounds.json, текстуры particles.png/popcorn.png/gui/i[...]

3.4) Blockbuster (mchorse.blockbuster)
Назначение:
- Сцены, актеры, модельные редакторы, редактор записей/таймлайна («sequencer» действий), GUI‑панели для управления �[...]

Главные элементы (по дереву):
- Blockbuster.java + Proxies
- API моделей (api.*): Model, ModelLimb, ModelPack, ModelTransform, json adapters, loaders (JSON/OBJ/VOX) + ленивые загрузчики, resource entries
- Клиент: ActorsPack, KeyboardHandler, RenderingHandler, SkinHandler
- GUI:
  - dashboard: GuiBlockbusterPanel/Panels, GuiFirstTime
  - model_block: GuiModelBlockList/Panel
  - model_editor: GuiModelEditorPanel + tabs (GuiModelEditorTab, GuiModelLimbs, GuiModelList, GuiModelOptions, GuiModelPoses), utils (GuiBBModelRenderer, GuiPoseTransformations, GuiT[...]
  - recording_editor: GuiRecordList, GuiRecordTimeline, GuiRecordingEditorPanel, actions (GuiActionPanel и 15+ специализированных панелей: Block/Break/BreakAnimation/Chat/Com[...]
  - scene: GuiReplaySelector, GuiSceneManager, GuiScenePanel
  - snowstorm: полноценный редактор частиц (разделы Appearance/Collision/Lighting/Expiration/General/Initialization/Lifetime/Mode/Motion/ParticleMorph/Rate/Shape/Space)[...]
  - utils: GuiGradientEditor
  - «Immersive» GUI: GuiImmersiveEditor, GuiImmersiveMorphMenu — близко к морф‑секвенсору
- Aperture интеграция: camera/modifiers/TrackerModifier (+ GUI панель)
- Сеть aperture: набор Packet* (SceneLength/RequestLength/Profiles), client/server handlers

Модели:
- Форматы: JSON/OBJ/VOX; MeshesOBJ/VOX; VoxReader/VoxDocument; редакторы поз/текстур; связь с GuiBBModelRenderer
- В отличие от Emoticons, Blockbuster не использует .bobj напрямую (используется собственная система моделей); однако есть [...]

3.5) Chameleon (mchorse.chameleon)
Назначение:
- Работа с Bedrock‑подобными моделями (.geo.json и .animation.json), проигрывание «действий» (ActionConfig/ActionsConfig) на основе MoLang и C[...]

Главные классы/жизненный цикл:
- Chameleon.java (@Mod), depends on McLib и Metamorph
  - preInit: McLib.EVENT_BUS.register(this), proxy.preInit(event), RegisterConfigEvent → ValueButtons("chameleon.general.buttons")
- CommonProxy:
  - configFile = <config>/chameleon
  - MorphManager.INSTANCE.factories.add(new ChameleonFactory())
- ClientProxy (SideOnly CLIENT):
  - Статически создаёт MolangParser (MolangHelper.registerVars + дополнительные переменные query.*)
  - modelsFile = <config>/chameleon/models
  - reloadModels(): рекурсивное сканирование директорий (кроме skins), загрузка .geo.json и *.animation.json (включая ./animations/), постро[...]
  - pack = new ChameleonPack(modelsFile); ReflectionUtils.registerResourcePack(pack); GlobalTree.TREE.register(new ChameleonTree(modelsFile))
  - getModelKeys(): ключи моделей для GUI/дерева
- lib.*: ChameleonAnimator/Loader/Model, MolangHelper; data.model (Model, Bone, Cube, Transform, Vertex/UV), data.animation (Animation, Channel, Interpolation, Vector, Part, Animations), parsing (Anim[...]
- animation: ActionConfig (NBT), ActionPlayback (Fade IN/OUT, speed/clamp/reset/tick/looping, приоритеты), ActionsConfig (map name→ActionConfig)
- metamorph: ChameleonFactory/ChameleonMorph/ChameleonSection; editor.*: GUI панели (MainPanel, ModelRenderer, Morph, CustomBodyPart, ActionsPanel; IBonePicker), render.* (Highlight/Stencil)
- mclib: ChameleonTree, ValueButtons

3.6) Commander (mchorse.commander)
Назначение:
- Расширяет команды через «для каждого» и подстановки выражений, а также «параллельные» команды через «||».

Главные классы/жизненный цикл:
- Commander.java (@Mod)
  - preLoad: proxy.preLoad(event) — регистрирует CommandHandler на шине
  - startServer: регистрирует серверную команду CommandForin, очищает переменные в CommandHandler
- CommonProxy: preLoad → MinecraftForge.EVENT_BUS.register(CommandHandler.instance); executeClientCommand(...) — заглушка
- ClientProxy (SideOnly CLIENT): preLoad → регистрирует команду CommandForinc в ClientCommandHandler; executeClientCommand(...) → ClientCommandHandler
- Команды:
  - CommandForin: /forin <start> <end> <command...>; permissionLevel=2; выполняет вложенную команду на диапазоне [start..end] с шагом ±1; три уровня[...]
  - CommandForinc: клиентский аналог (использует ClientCommandHandler через proxy)
- CommandHandler:
  - MathBuilder + Rewriter (SubRewriter "@\\{([^\\}]+)\\}") для вычисления выражений и замены в командной строке; DecimalFormat "0.######"
  - onCommand(CommandEvent):
    - защищает от рекурсии executingClient
    - если команда не /forin|/forinc:
      - если содержит " || " → разбивает и исполняет каждую под‑команду в клиенте или на сервере
      - если содержит "@{" → вычисляет/заменяет; для клиента вызывает клиентское исполнение, для сервера — подмен[...]
- Локализации: assets/commander/lang/en_US.lang — строки помощи/ошибки; типичная интеграция с McLib l10n.

3.7) ExtendedReach (mchorse.extendedreach)
Назначение:
- Изменяет дистанцию взаимодействия (reach) игрока для блоков/предметов/кастов на стороне клиента/сервера через[...]

Главные классы/жизненный цикл:
- ExtendedReach.java (@Mod)
  - Конфиг: reach (ValueFloat, 0..1024, syncable)
  - preInit: McLib.EVENT_BUS.register(this) для регистрации конфига
- Coremod:
  - ExtendedReachCM (IFMLLoadingPlugin): регистрирует ExtendedReachCMClassTransformer
  - ExtendedReachCMClassTransformer (extends CoreClassTransformer):
    - PlayerControllerMP → transform getBlockReachDistance() и extendedReach(): полностью заменены на статические вызовы BlockReach.getReach()/isExtended()
    - PlayerInteractionManager → ItemTransformer.processBlockReach на методы с REACH_DISTANCE
    - EntityRenderer.getMouseOver(float): удаляет LDC 6.0D (поиск через LDCInsnNode), затем удаляет следующий инстр., тем самым заменяет ст[...]
    - NetHandlerPlayServer.processUseEntity(CPacketUseEntity): заменяет LDC 9.0D и 36.0D на BlockReach.getDoubleReachSq()
    - Item: ItemTransformer.processBlockReach на rayTrace(World, EntityPlayer, boolean)
  - ItemTransformer:
    - Ищет шаблон вызовов REACH_DISTANCE (obf/deobf) и заменяет последовательность на INVOKESTATIC mchorse/extendedreach/utils/BlockReach.getDoubleReach()
    - equals(AbstractInsnNode, …) для сравнения Field/MethodInsnNode
  - PlayerControllerMPTransformer: см. выше (вставляет стат. вызовы и возвращает)
  - PlayerInteractionManagerTransformer: делегирует processBlockReach
  - EntityRendererTransformer: удаляет константный 6.0D (ray reach)
  - NetHandlerPlayServerTransformer: заменяет две константы дистанции на динамическую квадрат дистанции
- BlockReach.java: статические хелперы getReach()/getDoubleReach()/getDoubleReachSq()/isExtended()
- Ресурсы: mcmod.info, assets/extendedreach/lang/en_US.lang — строки конфиг‑GUI

Эффект: Все места Vanilla, где жёстко зашиты дистанции (6.0D/9.0D/36.0D/REACH_DISTANCE attr) — переподключены к значению из конфи�[...]

3.8) BetterLights (com.susjin.lampmod)
Назначение:
- Игровой контент: источники света, светящиеся кирпичи, провайдер света (невидимый блок), предметы лампы, реце�[...]

Главные классы/жизненный цикл:
- Lamp.java (@Mod 1.10.2)
  - preInit: регистрация ModItems/ModBlocks
  - Init: proxy.init(), ModCrafting.register(), GameRegistry.registerTileEntity(TileEntityLight)
  - postInit: лог
- LightTab: вкладка «tabLight»
- Blocks:
  - BlockGlowingBricks: Material.ROCK, hardness 1, light 1.0F, в креатив вкладке
  - BlockLight: стекло, неполный/непрозрачный куб, TRANSLUCENT, AABB столбика, ITileEntityProvider → TileEntityLight, коллизии ограничены бо�[...]
  - BlockLightProvider: «невидимый свет» (Material.AIR), невидим, без коллизии/дропа, заменяемый, FULLY OPAQUE=false, LIGHT 1.0F
- init.ModBlocks: регистрация блоков/ItemBlock, клиентый renderer (ModelResourceLocation инвентори)
- init.ModCrafting: рецепты (шэйпы, с использованием Blocks.STONEBRICK, GLOWSTONE, …)
- init.ModItems + items.Itemlampbot/lamptop
- proxy.* (Common/Client/Server), tileentity.TileEntityLight
- Ресурсы: blockstates, models block/item, textures, lang, mcmod.info

4) ПОЛНЫЙ GUI‑СПЕЦИФИКАТОР

4.1) Система GUI (McLib): принципы, лейаут, отрисовка

Базовая иерархия:
- GuiBase — базовый экран, содержит корневые GuiElement'ы и стек вьюпортов; отвечает за цикл событий и отрисовку.
- GuiElement — универсальный контейнер; имеет позиционирование, размер, список детей, методы draw/resize/mouse/key events; расш�[...]
- GuiScrollElement — скроллируемый контейнер с внутренней областью (ScrollArea, ScrollDirection).
- GuiPanelBase — панель с заголовками/рамками/логикой страниц.
- GuiModelRenderer — виджет 3D просмотра (используется в модельных редакторах).

Позиционирование и лейаут:
- utils.resizers.*: BaseResizer, AutomaticResizer, DecoratedResizer, Flex, ChildResizer, BoundsResizer (constraint), layout: ColumnResizer/GridResizer/RowResizer; Margin, IResizer/IParentResizer.
- utils.Area: прямоугольная область.
- utils.GuiViewportStack/IViewportStack: стек вьюпортов (для вложенных canvas и модальных).
- При добавлении компонентов используйте resizer() для привязки к контейнеру (anchor, offset, size), гибкая сетка/столбцы/с�[...]

Компоненты:
- buttons: GuiButtonElement (кнопки), GuiToggleElement (переключатели), GuiCirculateElement (перебор режимов), GuiIconElement (иконки), GuiSlotElement (слот�[...]
- input: текст/числа/цвет/трекпад, texture picker, keybind.
- list/search: разнообразные списочные и поисковые виджеты.
- modals: подтверждения/списки/сообщения/всплывающие/промпт.
- tooltips: dark/light стили, генерация тултипов (LabelTooltip, InterpolationTooltip).
- utils: GuiCanvas/Editor для рисования/manipulation, GuiInventoryElement, IconContainer, ITextColoring.
- keyframes: GuiDopeSheet (таблица кейфреймов по дорожкам), GuiGraphView (кривые интерполяции), GuiKeyframeElement/InterpolationsList, GuiKeyframesEditor, [...]

События/хоткеи:
- Клиент: KeyboardHandler (McLib.client.KeyboardHandler) — базовый хендлер клавиш (в McLib), KeybindConfig хранит раскладки. Вокруг этого стр�[...]

Отрисовка:
- GuiDraw/Drawable; RenderLightmap, VertexBuilder; цвета/границы/сетки управляются конфигами McLib (enable_borders/checkbox_rendering/grid_rendering/primary_color [...]

I18n:
- IKey/IKey.lang("mod.key") и LangKey: все тексты GUI через ключи, привязанные к assets/<mod>/lang/*.lang.

4.2) Каталог GUI по модулям

McLib (модули/экраны общего назначения):
- Весь «framework» и «keyframes» набор — общие компоненты (см. §4.1).
- mclib.client.mclib.*: GuiAbstractDashboard, GuiDashboard, GuiDashboardPanel(s), GuiDebugPanel, GuiGraphPanel — общий «дашборд» (плагинообразные панели).
- utils.Elements, GuiUtils, InterpolationRenderer — вспомогательные.

Metamorph (mchorse.metamorph.client.gui.*):
- GuiMorphs — основной экран выбора/редактирования морфов.
  - Элементы: списки категорий/секций (creative.categories.*), список морфов, панель превью (GuiMorphRenderer), панель свойств (GuiSet[...]
  - Лейаут: основной контейнер с разделением на левую (категории/списки), центральную (превью), правую (свойства[...]
  - Состояния: творческий/выживание; доступность элементов зависит от permmisions (opEntitySelector) и CommonProxy.canUse().
  - События: выбор морфа → отправка PacketSelectMorph / PacketMorphPlayer, редактирование → sync пакеты (creative PacketSyncMorph), удаление/и[...]
- creative.*:
  - GuiCreativeMorphs/GuiCreativeScreen — полноэкранные экраны c вкладками: меню, список, редактор; списки с поиском (GuiLabelSearchListEl[...]
  - GuiMorphSection — секция с панелями редактирования.
  - GuiQuickEditor/GuiNestedEdit — модальные/вспомогательные редакторы свойств морфа.
  - GuiSelectorEditor/GuiSelectorsScreen — редактор «селекторов» (клиентские selectors.json)
- editor.*:
  - GuiAbstractMorph — базовый редактор морфа.
  - GuiAnimation — панель анимации (использует McLib keyframe виджеты).
  - GuiMorphPanel/GuiSettingsPanel — конкретные свойства.
- overlays.*:
  - GuiHud (HUD с эмблемами/морф-инфо), GuiOverlay — overlay для acquired морфов.
- survival.*:
  - GuiSurvivalMorphs/GuiSurvivalScreen — упрощенная версия GUI для выживания (колёсико/список).
- Хоткеи: ClientProxy.keys (KeyboardHandler) — переключение морфов/панелей.

Emoticons (mchorse.emoticons.client.gui.*):
- GuiEmotes — экран выбора и управления эмотами.
  - Элементы: список эмоций (GuiEmotesList), фильтры/поиск, кнопки Play/Stop/Loop/Assign Keys (через EmoteKeys), предпросмотр модели (GuiEm[...]
  - Состояния: cosmetic режим (ClientProxy.mode = CosmeticMode.CLIENT | возможно серверный), disableAnimations/disableSoundEvents влияние на поведение.
  - События: выбор/запуск эмота → отправка PacketEmote; отображение/предпросмотр через AnimationManager/AnimatorController; подгруз�[...]
- GuiEmoticonsModelRenderer — виджет просмотра (орбитал камера, слои props/ragdoll, отображение actions).
- Интеграция GUI с Metamorph/Blockbuster через BBIntegration/MetamorphHandler — могут добавлять вкладки/кнопки в другие GUI.

Chameleon (mchorse.chameleon.metamorph.editor.*):
- GuiChameleonMorph — основной редактор морфа «хамелеон».
  - Элементы: GuiChameleonModelRenderer — просмотр bedrock‑модели; GuiChameleonMainPanel — панель свойств; панель действий GuiActionsPanel (ис�[...]
  - Состояния: перечень действий (idle/running/sprinting/crouching/…/shoot/consume/animation), параметры clamp/reset/speed/fade/tick, приоритеты; прив[...]
  - События: изменение действия → refresh() Animator; предпросмотр с FadeIn/Out; подсветка костей (ChameleonHighlightRenderer/StencilRenderer).

Blockbuster (таймлайн/редакторы):
- GuiRecordingEditorPanel — центральный редактор записей («sequencer» действий), включает:
  - GuiRecordTimeline — таймлайн с дорожками и клипами (клики действий)
  - GuiRecordList — список записей/треков
  - Панель действий (GuiActionPanel + специализированные панели для каждого типа действия): BlockAction/Break/BreakAnimation/Chat/Command/Da[...]
  - Панели сцены: GuiSceneManager/Panel, GuiReplaySelector — менеджмент сцен, воспроизведение/запрос длительности (через aperture/netwo[...]
  - Панель частиц: snowstorm.* — полнофункциональный редактор систем частиц (секционные панели, графики/градиенты, [...]
  - Модельный редактор: GuiModelEditorPanel + вкладки (Limbs/List/Options/Poses), утилиты (GuiBBModelRenderer, GuiPoseTransformations, GuiTextureCanvas), контекс�[...]
- Навигация/хоткеи: KeyboardHandler; операции таймлайна — начало/конец/воспроизведение/луп/зум; кейфрейм‑кривые для[...]

BetterLights:
- Прямых GUI нет, кроме CreativeTab (LightTab). Конфигураций/панелей не добавляет.

ExtendedReach:
- Прямых GUI нет; конфиг через McLib Config GUI (ValueFloat reach) — отображается в стандартном конфиг‑экране на базе McLib (кате�[...]

Commander:
- Прямых GUI нет.

4.3) «GUI sequencer morph» — реконструкция

Явного класса с именем «SequencerMorph» среди предоставленных артефактов нет. Функционально наиболее близкие инте�[...]
- Blockbuster: GuiRecordingEditorPanel + GuiRecordTimeline — это полноценный секвенсор действий/анимаций с дорожками, клипами, шкалой в[...]
- McLib: keyframes.* — низкоуровневые виджеты для построения секвенсора: GuiDopeSheet (редактор ключей по дорожкам), GuiGraphView [...]
- Metamorph: GuiAnimation и смежные редакторы морфов (в creative editor) — используют те же виджеты для таймлайна поз/свойств (се[...]
- Chameleon: не таймлайновый секвенсор, а конфигурация действий/переходов с fade in/out и приоритетами; тем не менее, Actio[...]

Глубокая реконструкция UX «sequencer morph» (на базе Blockbuster + McLib keyframes):
- Основной экран: левая панель — список дорожек (актеры/сущности/морф‑слои), центральная — таймлайн (GuiRecordTimeli[...]
- Дорожки (tracks): каждая соответствует объекту (актер, камера, морф), имеет слой клипов (actions). Клип содержит: тип д[...]
- Ключи (keys): в режиме деталей клипа — ключевые точки на параметрах (позиция/угол/морф‑параметр). Отображаются[...]
- Шкала времени: сверху ruler с метками; зум/пан (колесо/drag), goto/playhead (красная линия), кнопки Play/Stop/Loop/Prev/Next key.
- Инструменты: Insert/Delete clip, Split, Duplicate, Nudge, Snap to grid (grid шаг из McLib config, enable_grid_rendering). Context menu (GuiContextMenu/GuiSimpleContextMenu): опер[...]
- Горячие клавиши: через KeyboardHandler — пробел (play/pause), +/- (zoom), стрелки (шаг), Del (удалить), Ctrl+C/V (коп/вставить).
- Данные/сеть: изменение клипов поднимает Packet* (для Blockbuster — специфические пакеты sync записи/длины сцены), для м�[...]
- Тултипы/локализация: LabelTooltip/InterpolationTooltip, строки из assets/*/lang; названия действий (многоязычные).

5) ПАЙПЛАЙН .BOBJ (BOBJ): ОТ ЗАГРУЗКИ ДО ИСПОЛЬЗОВАНИЯ

Области использования:
- Emoticons — основной потребитель .bobj.
- Blockbuster — не использует BOBJ; имеет собственные JSON/OBJ/VOX загрузчики.
- Chameleon/Metamorph — свои форматы (Bedrock‑подобные JSON для Chameleon), морф‑NBT/JSON для Metamorph.

Пайплайн Emoticons:
1. Источники:
   - Встроенные ресурсы: /assets/emoticons/models/entity/*.bobj (default/slim/_3d/_simple/_simple_plus), props.bobj, props_simple.bobj, ragdoll.bobj, actions.bobj
   - Пользовательские файлы: <config>/emoticons/emotes/*.bobj и *.json (метаданные эмотов)
2. Парсинг:
   - BOBJLoader.readData(InputStream|FileInputStream) → BOBJData: содержит armatures (скелеты), meshes, actions (BOBJAction), инициализация через ragdoll.initiateArm[...]
3. Слияние:
   - ClientProxy.reloadActions():
     - Загружает actions.bobj, вызывает loadUserEmotes(actions) — добавляет user.actions, читает длительности из .json callback (возврат duration[...]
     - actionMap = actions.actions ∪ ragdoll.actions
   - Модели (steve/steve3d/alex/alex3d/… simple/plus):
     - Присвоение actionMap каждой модели
     - BOBJLoader.merge(propData, ragdoll); затем merge(modelData, propData или propSimpleData)
     - Копирование порядка костей ragdoll.armatures["ArmatureRagdoll"] → steve.armatures["Armature"]
4. Построение анимаций:
   - new Animation(name, BOBJData) или AnimationSimple
   - init() для подготовки (кеш, каналы, длительность)
   - Регистрация в AnimationManager.animations.put(name, new AnimationEntry(animation, configFolder, priority=1))
   - Загрузка AnimatorConfig (JSON из ресурсов) и регистрация в manager.configs (AnimatorConfigEntry)
5. GUI/Воспроизведение:
   - GuiEmotes/GuiEmoticonsModelRenderer — выбор эмоции → управление AnimatorEmoticonsController
   - Клавиши (EmoteKeys) — триггерят PacketEmote через network.Dispatcher; сервер шлёт широковещание/обработку (ServerHandlerEmote)
6. Синхронизация/режимы:
   - CosmeticMode (CLIENT|SERVER‑символика) влияет на направление пакетов
   - disableAnimations/disableSoundEvents из конфига — выключают проигрывание/звуки

Итог: BOBJ обрабатывается централизованно в Emoticons, объединяя «анимации действий» (actions.bobj) и «скелеты/модели» (def[...]

6) КАРТЫ СООТВЕТСТВИЙ: КЛАССЫ ↔ РЕСУРСЫ ↔ ЛОКАЛИЗАЦИИ ↔ GUI ЭЛЕМЕНТЫ

- Локализации:
  - McLib: assets/mclib/lang/*.lang — ключи tooltip_style.light/dark, keystrokes_position.*, и др. Используются через IKey.lang().
  - Emoticons: assets/emoticons/lang/*.lang — ключи player_model.*, player_preview.*, описания эмотов; ValueButtons — client‑side раздел.
  - Metamorph: assets/metamorph/lang/*.lang — названия морфов, категорий, GUI элементов, подсказки; help команд.
  - Commander: assets/commander/lang/en_US.lang — commander.forin/help, error.zero и т.д.
  - ExtendedReach: assets/extendedreach/lang/en_US.lang — названия/описания конфиг‑опций.
  - Chameleon: assets/chameleon/lang/en_us/ru_ru/uk_ua/zh_cn/zh_tw.lang — описания действий/GUI редактора.
  - BetterLights: assets/slp/lang/en_US.lang — названия блоков/предметов.

- Ресурсы → коды:
  - Emoticons: models/entity/*.bobj/*.json → ClientProxy.init → AnimationManager; sounds → проигрываются внутри эмотов (через ссылки в JSON, не показ�[...]
  - Blockbuster: models (OBJ/VOX), GUI текстуры/иконки (gui/icons.png), шейдеры (snowstorm)
  - McLib: assets/mclib/textures/gui/icons.png, shaders/preview.vert/frag
  - BetterLights: blockstates/models/textures → ModBlocks.registerRenders()
  - Metamorph: textures/gui/icons.png (общая иконка), shaders/onionskin — не у Metamorph, а у Emoticons (onionskin → нет; в Metamorph — нет шейдеров по дере�[...]

- GUI элементы ↔ классы:
  - McLib.GuiButtonElement / Toggle / Circulate ↔ кнопки/переключатели/селекторы режимов в любых панелях (Blockbuster/Metamorph/Emoticons/Chameleon)
  - McLib.GuiListElement / GuiSearchListElement ↔ списки морфов/эмотов/костылей
  - McLib.GuiDopeSheet / GuiGraphView ↔ таймлайн редактирования действий (Blockbuster / Metamorph.GuiAnimation)
  - Emoticons.GuiEmoticonsModelRenderer ↔ предпросмотр анимаций
  - Blockbuster.GuiBBModelRenderer / GuiTextureCanvas ↔ предпросмотр и редактирование моделей

7) СПРАВОЧНИК КОМАНД, СЕТЕВЫХ КАНАЛОВ И КОНФИГОВ

Команды:
- Commander:
  - /forin <start> <end> <command...> — выполняет команду, инкрементируя индекс (i/j/k) от start к end (включительно), с переменными i_c[...]
  - /forinc — клиентский аналог (исполнение через ClientCommandHandler), те же аргументы и поведение.
  - Встроенный препроцессор: 
    - «||» — разделение на несколько команд одной строки, исполняются по порядку
    - "@{expr}" — подстановка результата выражения (MathBuilder) в команду (числа форматируются 0.######; также строки)
- Metamorph:
  - /morph, /acquiremorph, /metamorph — управление морфами; подробности поведения — через соответствующие классы CommandMorph/Command[...]
- McLib:
  - CommandMcLib, CommandCheats — служебные/чит‑команды (регистрируются на сервере SP).

Сетевые каналы:
- Emoticons.channel = "Emoticons" (FMLEventChannel) — PacketEmote/PacketGameMode; client/server handlers.
- Metamorph.channel = "Metamorph" — creative/survival/settings/blacklist пакеты.
- McLib.network.mclib.Dispatcher — пакеты PacketAnswer/Boolean/Config/Confirm/DropItem/RequestConfigs/RequestPermission; клиентские/серверные handlers.
- Blockbuster.aperture — PacketAudioShift, PacketRequestLength/Profiles, PacketSceneLength; client/server handlers.
- ExtendedReach — каналы не используются (ASM патчи).

Конфиги:
- McLib (множество): appearance/tutorials/background/scrollbars/multiskin/vanilla, включая цветовые настройки и опции отрисовки, syncable значени[...]
- Metamorph: acquiring/morphs/preview — набор из ~15 опций, ряд clientSide/syncable; хранение серверных настроек; опции first‑person hand, idle sounds,[...]
- Emoticons: general/buttons/animations/player_preview — disableAnimations(sync), modelType (режимы), player preview (mode/scale/x/y).
- ExtendedReach: general.reach = 5.0F по умолчанию (0..1024), syncable.
- Chameleon: "chameleon.general.buttons" (ValueButtons) — клиентская панель.
- BetterLights: конфигов нет (кроме mcmod.info).

Пермишены (McLib):
- permissionFactory; категории "edit_config", "gui", "access_gui"; RegisterPermissionsEvent в McLib.

8) ПРИЛОЖЕНИЕ: ТАБЛИЦЫ КЛАССОВ/МЕТОДОВ И ТОЧКИ ВХОДА (выборочно, по ключевым зонам)

McLib:
- mchorse.mclib.McLib: onConfigRegister(), onPermissionRegister(), preInit(), init(), serverInit(), main(), test() — точка входа и регистрация инфраструктуры.
- mchorse.mclib.client.framework: GuiBase, GuiElement, GuiScrollElement, GuiPanelBase, GuiModelRenderer — базовые GUI‑компоненты.
- mchorse.mclib.client.keyframes: GuiDopeSheet, GuiGraphView, GuiKeyframesEditor — кейфрейм элементы.
- mchorse.mclib.network.mclib.Dispatcher — регистрация сетевых пакетов.
- mchorse.mclib.core.* — ClassTransformer'ы (payload/resource manager), влияние на Vanilla.

Metamorph:
- mchorse.metamorph.Metamorph: preLoad/load/postLoad/serverStarting — канал, конфиги, команды.
- Proxies: preLoad → Dispatcher.register(), CapabilityManager.INSTANCE.register(); ClientProxy.postLoad() → подмена RenderPlayer на RenderSubPlayer.
- api.EntityUtils: stripEntityNBT(), compareData(), slotForIndex(), getMorph(), getPose(), getTargetEntity(), rayTrace(), forceUpdateSize(), canPlayerMorphFit() — утилиты морфинга.

Emoticons:
- mchorse.emoticons.ClientProxy.preInit/init(): загрузка keys.json, регистрация GUI/handlers, загрузка BOBJ, анимаций, конфигов.
- reloadActions(), loadUserEmotes() — объединение действий, поддержка пользователя.
- skin_n_bones.api: Animation, AnimationManager (animations/configs), AnimatorConfig/Entry; bobj: BOBJLoader, BOBJAction, BOBJData (initiateArmatures, merge).

Chameleon:
- ClientProxy.reloadModels()/recursiveReloadModel()/reloadModelFolder(): сканирование и загрузка bedrock‑моделей и анимаций, трекинг lastUpdate, реги�[...]
- animation.ActionPlayback: fade in/out, update(), getTick(), apply() → ChameleonAnimator.animate(...).
- animation.Animator.refresh()/update()/controlActions(): логика выбора действий по состоянию сущности (здоровье/вода/езда/полет/бег/пр[...]

Blockbuster:
- GuiRecordingEditorPanel: композиция таймлайна/списка/панелей действий.
- GuiRecordTimeline: визуализация дорожек/клипов; работа с McLib‑виджетами (допущение, исходя из архитектуры).
- Множество специализированных панелей действий (см. дерево) — формы с input‑элементами; связывание с Packet*.

ExtendedReach (ASM):
- PlayerControllerMPTransformer.processGetBlockReachDistance(): заменяет тело метода на BlockReach.getReach(); extendedReach() → BlockReach.isExtended()
- EntityRendererTransformer.processGetMouseOver(): удаляет 6.0D константу, снижая жесткий порог
- NetHandlerPlayServerTransformer.processGetMouseOver(): заменяет 9.0D/36.0D → getDoubleReachSq()
- ItemTransformer.processBlockReach(): заменяет вызовы к EntityPlayer.REACH_DISTANCE → BlockReach.getDoubleReach()

BetterLights:
- Блоки: методы визуализации/коллизии/светимости; TileEntityLight; регистрация моделей в клиентском прокси.

9) ИСТОЧНИКИ И ПОКРЫТИЕ

Анализ выполнен по предоставленным файлам/деревьям:
- BetterLights:
  - ploot887/Mod/files/BetterLights-master_all_files_and_properties.txt
  - ploot887/Mod/files/BetterLights-master_tree.txt
- Blockbuster:
  - ploot887/Mod/files/blockbuster-2.7.1_all_files_and_properties.txt
  - ploot887/Mod/files/blockbuster-2.7.1_tree.txt
- Chameleon:
  - ploot887/Mod/files/chameleon-1.2.2_all_files_and_properties.txt
  - ploot887/Mod/files/chameleon-1.2.2_tree.txt
- Commander:
  - ploot887/Mod/files/commander-1.1_all_files_and_properties.txt
  - ploot887/Mod/files/commander_1.1_tree.txt
- Emoticons:
  - ploot887/Mod/files/emoticons-1.1.2_all_files_and_properties.txt
  - ploot887/Mod/files/emoticons-1.1.2_tree.txt
- ExtendedReach:
  - ploot887/Mod/files/extendedreach-1.1.1_all_files_and_properties.txt
  - ploot887/Mod/files/extendedreach-1.1.1_tree.txt
- McLib:
  - ploot887/Mod/files/mclib-2.4.3_all_files_and_properties.txt
  - ploot887/Mod/files/mclib-2.4.3_tree.txt
- Metamorph:
  - ploot887/Mod/files/metamorph-1.4_all_files_and_properties.txt
  - ploot887/Mod/files/metamorph-1.4_tree.txt

Ограничения: некоторые большие деревья (например, Blockbuster) сокращены в источнике («[...]»), поэтому полные списки [...]

ИТОГ

Данный документ консолидирует архитектуру и поведение всего стека модов как единой системы: McLib предоставля�[...]

```

Приложение B. Минимальные шаблоны сборки

```json name=fabric.mod.json
{
  "schemaVersion": 1,
  "id": "metamod",
  "version": "0.1.0",
  "name": "MetaMod (Unified McHorse Stack)",
  "description": "Unified Fabric port of McLib, Metamorph, Emoticons, Chameleon, Blockbuster, Commander, ExtendedReach, BetterLights for MC 1.20.1.",
  "authors": [ "YourName" ],
  "contact": {
    "homepage": "https://example.com",
    "sources": "https://github.com/your/repo"
  },
  "license": "MIT",
  "icon": "assets/metamod/icon.png",
  "environment": "*",
  "entrypoints": {
    "main": [ "dev.metamod.core.Metamod" ],
    "client": [ "dev.metamod.core.client.MetamodClient" ]
  },
  "mixins": [
    "metamod.mixins.json"
  ],
  "depends": {
    "fabricloader": ">=0.14.22",
    "fabric": ">=0.86.1+1.20.1",
    "minecraft": "1.20.1"
  },
  "suggests": { }
}
```

```properties name=gradle.properties
org.gradle.jvmargs=-Xmx2G
minecraft_version=1.20.1
yarn_mappings=1.20.1+build.10
loader_version=0.14.22
fabric_version=0.86.1+1.20.1
loom_version=1.3.10
mod_version=0.1.0
maven_group=dev.metamod
archives_base_name=metamod
java_version=17
```

```groovy name=build.gradle
plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

loom {
    splitEnvironmentSourceSets()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = project.java_version as Integer
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
```

```groovy name=settings.gradle
pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { url = 'https://maven.fabricmc.net/' }
    }
}
rootProject.name = "metamod"
```

Приложение C. Список Mixins (Yarn 1.20.1+build.10)

- dev.metamod.extendedreach.mixin.ClientPlayerInteractionManagerMixin
  - target: net.minecraft.client.network.ClientPlayerInteractionManager
  - method: getReachDistance()F
  - inject: @Inject(at = @At("HEAD"), cancellable = true)
  - return: float (config reach)
  - env: CLIENT
- dev.metamod.extendedreach.mixin.GameRendererMixin
  - target: net.minecraft.client.render.GameRenderer
  - method: updateTargetedEntity(F)V
  - inject: @ModifyConstant(constant = @Constant(doubleValue = 6.0D))
  - replace with: (double) reach
  - env: CLIENT
  - Предположение: добавить @ModifyConstant для 9.0D если встречается
- dev.metamod.extendedreach.mixin.ServerPlayNetworkHandlerMixin
  - target: net.minecraft.server.network.ServerPlayNetworkHandler
  - methods:
    - onPlayerInteractEntity(Lnet/minecraft/network/packet/c2s/play/PlayerInteractEntityC2SPacket;)V
      - @ModifyConstant 36.0D → reach^2
      - @ModifyConstant 9.0D → reach^2
    - onPlayerInteractBlock(Lnet/minecraft/network/packet/c2s/play/PlayerInteractBlockC2SPacket;)V
      - @Redirect( call to squaredDistanceTo / comparison ) → compare to reach^2
  - env: SERVER
- dev.metamod.extendedreach.mixin.ServerPlayerInteractionManagerMixin
  - target: net.minecraft.server.network.ServerPlayerInteractionManager
  - methods:
    - tryBreakBlock(Lnet/minecraft/util/math/BlockPos;)Z
      - @ModifyConstant 36.0D → reach^2
    - updateBlockBreakingProgress(...) / processBlockBreakingAction(...)
      - альтернативные точки, если в текущей версии проверки тут
  - env: SERVER

Примечание: проверка точных присутствий констант 36.0D/9.0D в методах ServerPlayNetworkHandler и ServerPlayerInteractionManager для 1.20.1 обязательна на этапе имплементации; при различиях используем @Redirect на сравнения дистанций.

Приложение D. Примеры команд

- /forin 1 3 say Hello @{i}
  - Выполнит:
    - say Hello 1
    - say Hello 2
    - say Hello 3
- /forin 3 1 say Step @{i} || say Done
  - Выполнит:
    - say Step 3
    - say Step 2
    - say Step 1
    - затем say Done
- /forinc 1 5 tp @p ~ @{i} ~
  - Клинт‑команда; выполняется локально (без сервера), если поддерживается

Приложение E. Ключи конфигов (выдержка)

core:
- core.ui.appearance.primary_color (int ARGB, default 0xFF00AACC) — Предположение
- core.ui.grid_rendering (bool) — из §4.1 описания рендера/сеток

metamorph:
- metamorph.opEntitySelector (bool, syncable)
- metamorph.preventGhosts (bool)
- metamorph.killAcquire (bool)
- metamorph.acquireImmediately (bool)
- metamorph.keepMorphs (bool)
- metamorph.disablePov (bool)
- metamorph.disableHealth (bool)
- metamorph.disableMorphAnimation (bool)
- ... (прочие из §3.2 со знаками «[…]» — уточнить при имплементации)

emoticons:
- emoticons.animations.disableAnimations (bool, syncable)
- emoticons.general.disableSoundEvents (bool)
- emoticons.general.modelType (enum: default/simple/extruded/simple_plus)
- emoticons.player_preview.mode (enum)
- emoticons.player_preview.scale (float)
- emoticons.player_preview.x/y (int)

chameleon:
- chameleon.general.buttons (ValueButtons → GUI layout/state) — клиентская

extendedreach:
- extendedreach.general.reach (float, default 5.0, min 0, max 1024, syncable)

commander:
- commander.max_pipes (int, default 8) — Предположение
- commander.max_nested (int, default 3) — Предположение


Приложение F. Тест‑кейсы (выдержка)

- Metamorph:
  - Смена морфа → синхронизация клиентам; HUD overlay отражает новое состояние
  - Blacklist применяет запреты на выбор/применение
  - GUI creative: поиск, редактирование, селекторы

- Emoticons:
  - Загрузка встроенных .bobj и пользовательских; merge ragdoll/props; playback любой эмоции
  - Отключение анимаций/звуков конфигом

- Chameleon:
  - Рекурсивная загрузка .geo/.animation.json; MoLang переменные; переключение действий с fade
  - GUI подсветка костей; редактирование ActionConfig

- Blockbuster:
  - Создание записи, добавление клипов на таймлайне, перемещение/сплит/луп
  - Частицы: изменение секций; предпросмотр

- Commander:
  - /forin с «||» и @{expr}; защита от рекурсии; числовой формат

- ExtendedReach:
  - Reach sync s→c, raycast визуал и фактическая проверка совпадают
  - Взаимодействия на дистанции > vanilla

- BetterLights:
  - Размещение светящихся блоков, невидимого свет‑провайдера; корректный рендер/коллизии


Конец документа.
